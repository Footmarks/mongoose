{
  "name": "mongodb",
  "version": "2.0.28",
  "description": "MongoDB legacy driver emulation layer on top of mongodb-core",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Footmarks/node-mongodb-native.git"
  },
  "keywords": [
    "mongodb",
    "driver",
    "legacy"
  ],
  "dependencies": {
    "mongodb-core": "1.1.25",
    "readable-stream": "1.0.31"
  },
  "devDependencies": {
    "integra": "0.1.8",
    "optimist": "0.6.1",
    "bson": "~0.3",
    "jsdoc": "3.3.0-beta3",
    "semver": "4.1.0",
    "rimraf": "2.2.6",
    "gleak": "0.5.0",
    "mongodb-version-manager": "^0.5.0",
    "mongodb-tools": "~1.0"
  },
  "author": {
    "name": "Christian Kvalheim"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/mongodb/node-mongodb-native/issues"
  },
  "scripts": {
    "test": "node test/runner.js -t functional"
  },
  "homepage": "https://github.com/Footmarks/node-mongodb-native",
  "gitHead": "441729c48ecb3c723ae00dfa971e11e197a2c5d3",
  "readme": "[![NPM](https://nodei.co/npm/mongodb.png?downloads=true&downloadRank=true)](https://nodei.co/npm/mongodb/) [![NPM](https://nodei.co/npm-dl/mongodb.png?months=6&height=3)](https://nodei.co/npm/mongodb/)\r\n\r\n[![Build Status](https://secure.travis-ci.org/mongodb/node-mongodb-native.png)](http://travis-ci.org/mongodb/node-mongodb-native)\r\n\r\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/mongodb/node-mongodb-native?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n\r\n# Description\r\n\r\nThe MongoDB driver is the high level part of the 2.0 or higher MongoDB driver and is meant for end users.\r\n\r\n## MongoDB Node.JS Driver\r\n \r\n| what          | where                                          |\r\n|---------------|------------------------------------------------|\r\n| documentation | http://mongodb.github.io/node-mongodb-native/  |\r\n| api-doc        | http://mongodb.github.io/node-mongodb-native/  |\r\n| source        | https://github.com/mongodb/node-mongodb-native |\r\n| mongodb       | http://www.mongodb.org/                        |\r\n\r\n### Blogs of Engineers involved in the driver\r\n- Christian Kvalheim [@christkv](https://twitter.com/christkv) <http://christiankvalheim.com>\r\n\r\n### Bugs / Feature Requests\r\n\r\nThink youâ€™ve found a bug? Want to see a new feature in node-mongodb-native? Please open a\r\ncase in our issue management tool, JIRA:\r\n\r\n- Create an account and login <https://jira.mongodb.org>.\r\n- Navigate to the NODE project <https://jira.mongodb.org/browse/NODE>.\r\n- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.\r\n\r\nBug reports in JIRA for all driver projects (i.e. NODE, PYTHON, CSHARP, JAVA) and the\r\nCore Server (i.e. SERVER) project are **public**.\r\n\r\n### Questions and Bug Reports\r\n\r\n * mailing list: https://groups.google.com/forum/#!forum/node-mongodb-native\r\n * jira: http://jira.mongodb.org/\r\n\r\n### Change Log\r\n\r\nhttp://jira.mongodb.org/browse/NODE\r\n\r\nQuickStart\r\n==========\r\nThe quick start guide will show you how to setup a simple application using node.js and MongoDB. It scope is only how to set up the driver and perform the simple crud operations. For more in depth coverage we encourage reading the tutorials.\r\n\r\nCreate the package.json file\r\n----------------------------\r\nLet's create a directory where our application will live. In our case we will put this under our projects directory.\r\n\r\n```\r\nmkdir myproject\r\ncd myproject\r\n```\r\n\r\nEnter the following command and answer the questions to create the initial structure for your new project\r\n\r\n```\r\nnpm init\r\n```\r\n\r\nNext we need to edit the generated package.json file to add the dependency for the MongoDB driver. The package.json file below is just an example and your will look different depending on how you answered the questions after entering `npm init`\r\n\r\n```\r\n{\r\n  \"name\": \"myproject\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"My first project\",\r\n  \"main\": \"index.js\",\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/christkv/myfirstproject.git\"\r\n  },\r\n  \"dependencies\": {\r\n    \"mongodb\": \"~2.0\"\r\n  },\r\n  \"author\": \"Christian Kvalheim\",\r\n  \"license\": \"Apache 2.0\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/christkv/myfirstproject/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/christkv/myfirstproject\"\r\n}\r\n```\r\n\r\nSave the file and return to the shell or command prompt and use **NPM** to install all the dependencies.\r\n\r\n```\r\nnpm install\r\n```\r\n\r\nYou should see **NPM** download a lot of files. Once it's done you'll find all the downloaded packages under the **node_modules** directory.\r\n\r\nBooting up a MongoDB Server\r\n---------------------------\r\nLet's boot up a MongoDB server instance. Download the right MongoDB version from [MongoDB](http://www.mongodb.org), open a new shell or command line and ensure the **mongod** command is in the shell or command line path. Now let's create a database directory (in our case under **/data**).\r\n\r\n```\r\nmongod --dbpath=/data --port 27017\r\n```\r\n\r\nYou should see the **mongod** process start up and print some status information.\r\n\r\nConnecting to MongoDB\r\n---------------------\r\nLet's create a new **app.js** file that we will use to show the basic CRUD operations using the MongoDB driver.\r\n\r\nFirst let's add code to connect to the server and the database **myproject**.\r\n\r\n```js\r\nvar MongoClient = require('mongodb').MongoClient\r\n  , assert = require('assert');\r\n\r\n// Connection URL\r\nvar url = 'mongodb://localhost:27017/myproject';\r\n// Use connect method to connect to the Server\r\nMongoClient.connect(url, function(err, db) {\r\n  assert.equal(null, err);\r\n  console.log(\"Connected correctly to server\");\r\n\r\n  db.close();\r\n});\r\n```\r\n\r\nGiven that you booted up the **mongod** process earlier the application should connect successfully and print **Connected correctly to server** to the console.\r\n\r\nLet's Add some code to show the different CRUD operations available.\r\n\r\nInserting a Document\r\n--------------------\r\nLet's create a function that will insert some documents for us.\r\n\r\n```js\r\nvar insertDocuments = function(db, callback) {\r\n  // Get the documents collection\r\n  var collection = db.collection('documents');\r\n  // Insert some documents\r\n  collection.insert([\r\n    {a : 1}, {a : 2}, {a : 3}\r\n  ], function(err, result) {\r\n    assert.equal(err, null);\r\n    assert.equal(3, result.result.n);\r\n    assert.equal(3, result.ops.length);\r\n    console.log(\"Inserted 3 documents into the document collection\");\r\n    callback(result);\r\n  });\r\n}\r\n```\r\n\r\nThe insert command will return a results object that contains several fields that might be useful.\r\n\r\n* **result** Contains the result document from MongoDB\r\n* **ops** Contains the documents inserted with added **_id** fields\r\n* **connection** Contains the connection used to perform the insert\r\n\r\nLet's add call the **insertDocuments** command to the **MongoClient.connect** method callback.\r\n\r\n```js\r\nvar MongoClient = require('mongodb').MongoClient\r\n  , assert = require('assert');\r\n\r\n// Connection URL\r\nvar url = 'mongodb://localhost:27017/myproject';\r\n// Use connect method to connect to the Server\r\nMongoClient.connect(url, function(err, db) {\r\n  assert.equal(null, err);\r\n  console.log(\"Connected correctly to server\");\r\n\r\n  insertDocuments(db, function() {\r\n    db.close();\r\n  });\r\n});\r\n```\r\n\r\nWe can now run the update **app.js** file.\r\n\r\n```\r\nnode app.js\r\n```\r\n\r\nYou should see the following output after running the **app.js** file.\r\n\r\n```\r\nConnected correctly to server\r\nInserted 3 documents into the document collection\r\n```\r\n\r\nUpdating a document\r\n-------------------\r\nLet's look at how to do a simple document update by adding a new field **b** to the document that has the field **a** set to **2**.\r\n\r\n```js\r\nvar updateDocument = function(db, callback) {\r\n  // Get the documents collection\r\n  var collection = db.collection('documents');\r\n  // Update document where a is 2, set b equal to 1\r\n  collection.update({ a : 2 }\r\n    , { $set: { b : 1 } }, function(err, result) {\r\n    assert.equal(err, null);\r\n    assert.equal(1, result.result.n);\r\n    console.log(\"Updated the document with the field a equal to 2\");\r\n    callback(result);\r\n  });  \r\n}\r\n```\r\n\r\nThe method will update the first document where the field **a** is equal to **2** by adding a new field **b** to the document set to **1**. Let's update the callback function from **MongoClient.connect** to include the update method.\r\n\r\n```js\r\nvar MongoClient = require('mongodb').MongoClient\r\n  , assert = require('assert');\r\n\r\n// Connection URL\r\nvar url = 'mongodb://localhost:27017/myproject';\r\n// Use connect method to connect to the Server\r\nMongoClient.connect(url, function(err, db) {\r\n  assert.equal(null, err);\r\n  console.log(\"Connected correctly to server\");\r\n\r\n  insertDocuments(db, function() {\r\n    updateDocument(db, function() {\r\n      db.close();\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nRemove a document\r\n-----------------\r\nNext lets remove the document where the field **a** equals to **3**.\r\n\r\n```js\r\nvar removeDocument = function(db, callback) {\r\n  // Get the documents collection\r\n  var collection = db.collection('documents');\r\n  // Insert some documents\r\n  collection.remove({ a : 3 }, function(err, result) {\r\n    assert.equal(err, null);\r\n    assert.equal(1, result.result.n);\r\n    console.log(\"Removed the document with the field a equal to 3\");\r\n    callback(result);\r\n  });    \r\n}\r\n```\r\n\r\nThis will remove the first document where the field **a** equals to **3**. Let's add the method to the **MongoClient.connect** callback function.\r\n\r\n```js\r\nvar MongoClient = require('mongodb').MongoClient\r\n  , assert = require('assert');\r\n\r\n// Connection URL\r\nvar url = 'mongodb://localhost:27017/myproject';\r\n// Use connect method to connect to the Server\r\nMongoClient.connect(url, function(err, db) {\r\n  assert.equal(null, err);\r\n  console.log(\"Connected correctly to server\");\r\n\r\n  insertDocuments(db, function() {\r\n    updateDocument(db, function() {\r\n      removeDocument(db, function() {\r\n        db.close();\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nFinally let's retrieve all the documents using a simple find.\r\n\r\nFind All Documents\r\n------------------\r\nWe will finish up the Quickstart CRUD methods by performing a simple query that returns all the documents matching the query.\r\n\r\n```js\r\nvar findDocuments = function(db, callback) {\r\n  // Get the documents collection\r\n  var collection = db.collection('documents');\r\n  // Find some documents\r\n  collection.find({}).toArray(function(err, docs) {\r\n    assert.equal(err, null);\r\n    assert.equal(2, docs.length);\r\n    console.log(\"Found the following records\");\r\n    console.dir(docs);\r\n    callback(docs);\r\n  });\r\n}\r\n```\r\n\r\nThis query will return all the documents in the **documents** collection. Since we removed a document the total documents returned is **2**. Finally let's add the findDocument method to the **MongoClient.connect** callback.\r\n\r\n```js\r\nvar MongoClient = require('mongodb').MongoClient\r\n  , assert = require('assert');\r\n\r\n// Connection URL\r\nvar url = 'mongodb://localhost:27017/myproject';\r\n// Use connect method to connect to the Server\r\nMongoClient.connect(url, function(err, db) {\r\n  assert.equal(null, err);\r\n  console.log(\"Connected correctly to server\");\r\n\r\n  insertDocuments(db, function() {\r\n    updateDocument(db, function() {\r\n      removeDocument(db, function() {\r\n        findDocuments(db, function() {\r\n          db.close();\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nThis concludes the QuickStart of connecting and performing some Basic operations using the MongoDB Node.js driver. For more detailed information you can look at the tutorials covering more specific topics of interest.\r\n\r\n## Next Steps\r\n\r\n * [MongoDB Documentation](http://mongodb.org/)\r\n * [Read about Schemas](http://learnmongodbthehardway.com/)\r\n * [Star us on GitHub](https://github.com/mongodb/node-mongodb-native)\r\n",
  "readmeFilename": "README.md",
  "_id": "mongodb@2.0.28",
  "_shasum": "447f9d0b5cfbe60c6547c0973a431c1a4339b3b8",
  "_from": "footmarks/node-mongodb-native#441729c48e",
  "_resolved": "git://github.com/footmarks/node-mongodb-native.git#441729c48ecb3c723ae00dfa971e11e197a2c5d3"
}
